source('~/rprog-002/rankall.R')
rankall("heart attack", 20)
source('~/.active-rstudio-document')
rankall("heart attack", 20)
submit()
source('~/.active-rstudio-document')
submit()
submit()
submit()
View(Clean)
View(Month)
plot(1:10)
plot(1:10, type = "b")
plot(1:10, type = "a")
plot(1:10, type = "t")
2/12
?elt
?gl
library(datasets)
data(iris)
iris
SL <- iris[,Sepal.Length]
data <-read.table(iris)
data <-read.table("iris")
iris$Speal.Length
?iris
iris[1,1]
SL <- iris[,"Sepal.Length"]
sp <- iris["Species"]
sp
tapply(SL, sp, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
library(datasets)
data(mtcars)
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
av <- tapply(mtcars$mpg, mtcars$cyl, mean)
?mtcars
av <- tapply(mtcars$hp, mtcars$cyl, mean)
av[4]-av[8]
av
avv <- as.numeric(av)
avv
avv[3]-av[1]
debug(ls)
ls
ls()
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
library("RmySql")
library("RmySQL")
library("RmMSQL")
library("RMySQL")
library("DBI")
library("RMySQL")
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <-dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10); dbClearResult(query);
dim(affyMisSmall)
disconnect(hg19)
dbDisconnect(hg19)
View(affyData)
View(affyMis)
View(affyMisSmall)
436/242
242/436
setwd("../MakeSenseData")
setwd("~/exdata-002")
#K-means Clustering
set.seed(1234)
par(mar = c(0,0,0,0))
x <- rnorm(12, mean =rep(1:3, each =4), sd = 0.2)
y <- rnorm(12, mean =rep(c(1,2,1), each =4), sd = 0.2)
plot(x, y, col ="blue", pch = 19, cex = 2)
text(x+0.05, y+0.05, labels=as.character(1:12))
##kmeans()
dataFrame <- data.frame(x,y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
kmeansObj$cluster
par(mar = rep(0.2,4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
##Heatmaps
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
kmeansObj2 <- kmeans(dataMatrix, center = 3)
par(mfrow = c(1,2), mar = c(2, 2, 2, 2)
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
par(mfrow = c(1,2), mar = c(2, 2, 2, 2))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
dataMtrix
dataMatrix
t(dataMatrix)
t(dataMatrix)[,nrow(dataMatrix:1)]
t(dataMatrix)[,nrow(dataMatrix):1]
kmeansObj$cluster
kmeansObj2$cluster
image(t(dataMatrix)[, nrow(dataMatrix):1])
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
par(mfrow = c(1,2), mar = c(2, 2, 2, 2))
image(t(dataMatrix)[, nrow(dataMatrix):1])
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "i")
par(mfrow = c(1,2), mar = c(2, 2, 2, 2))
image(t(dataMatrix)[, nrow(dataMatrix):1])
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "i")
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "s")
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, nrow(dataMatrix):1],  col = "rainbow", yaxt = "n")
par(mfrow = c(1,2), mar = c(2, 2, 2, 2))
image(t(dataMatrix)[, nrow(dataMatrix):1])
image(t(dataMatrix)[, nrow(dataMatrix):1],  col = "rainbow", yaxt = "n")
image(t(dataMatrix)[, nrow(dataMatrix):1],  col = rainbow, yaxt = "n")
par(mfrow = c(1,2), mar = c(2, 2, 2, 2))
image(t(dataMatrix)[, nrow(dataMatrix):1])
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
par(mfrow = c(1,2), mar = c(2, 2, 2, 2))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
par(mfrow = c(1,2), mar = c(2, 2, 2, 2))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj2$cluster)], yaxt = "n")
x <- c(12.2, 8.33, 12.4, 9.17, 11.6, 11.18)x5
x <- c(12.2, 8.33, 12.4, 9.17, 11.6, 11.18)*5
x
y <- 10/x
y
install.packages("seqinr")
seq <- "atgatgaaatct"
library(seqinr)
aaseq <- translate(seq)
seq
seq <- s2c(seq)
seq
aaseq <- translate(seq)
aaseq
aaseq <- c2s(aaseq)
aaseq
library(seqinr)
seq <- "ATGGAGAGCGTTTCCTCATTATTTAACATTTTTTCAACAATCATGGTTAACTATAAATCGTTAGTTCTAGCACTATTAAGTGTTTCAAATCTCAAATATGCACGGGGTATGCCGACATCTGAGAGACAGCAGGGCTTAGAAGAACGTGACTTCAGTGCTGCTACTTGCGTACTGATGGGCGCAGAAGTAGGCTCATGGGGAATGGTTTATAGTGGTCAGAAGGTCGAGAGTTGGATCCTCTACGTTCTGACTGGCATTACTACGATGAGCGCAATCGTTGACGAAATTGACTATTATGCGTCACATATGCCACTGAGTGTTGTGGGTGAGAACTCAGGGCTACAAATCGTTCGTGATACCATAGTAACCTTGGTTATGGCTGGCCTGACAGCATCAGCTAACAAGGTAATCAGTAAGACTGAAAACGCAGAGAATATACAATCGCGTAGTCTTATACCGGGTCTGCTTAGTATGGATTATAACAGTACTCATACTATGGCGATTAATTTGGAAGACGTATTCTCGGAGCTCGGCTGGGACATCGATACTAGTGATAGCTCTGGTTTATACAAACGTGACGATAATTCTGTCACTCTGCACCTAGGGGACGTACCTGCTCTAGGCACCAGTAACACTATCATACCTAACGCTGTCATGCAAATATATAATAACGCATCATTTGCTTTCGGTTTTGCACCTCATAGCAACGGTAATTCTACAGGCTTGCAGAAACGAGCTAGTATTGATGATGCGGTGTGGTTACAATTTGCATACGGAATAGCTTATAGTGCCTGGATAGGCTCTGAGAATGTGGGTTCCTATGATCAGCATCTAGCTGAAGCTAACGGTATGGCTAACTACTGGACGTCCGAGTGTTCTAAGTACAATGGTGTCATCTGGGGTGACGAATCAGACGCCTGCGGTAACTGGCTAGCATCACAGCGTTTAGACATAGTGAGTCACTCAACTGGCAATTACTACAGAGACGTTAACCTCTGTGGTGACGACGAGGCAAGGTGCCACGATGAGCTACGCTAA
"
translate2 <- function(seq){
seq <- s2c(seq)
aaseq <- translate(seq)
aaseq <- c2s(aaseq)
aaseq
}
translate2(seq)
package.contents(seqinr)
ls(seqinr)
data(package = "seqinr")
pK
toyaa
fasta
SEQINR.UTIL
clustal
object(seqinr)
objects(seqinr)
tablecode()
where.is.this.acc("NC_001416")
getSequence("NC_001416")
getSequence("aag TTciu bbh")
install.packages("MEET")
objects(seqinr)
?MEET
??MEET
library("MEET", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages("pcaMethods")
library(MEET)
install.package(pcaMethods,repos = "http://www.bioconductor.org/packages/release/bioc/bin/macosx/mavericks/contrib/3.1/pcaMethods_1.54.0.tgz")
install.packages(pcaMethods,repos = "http://www.bioconductor.org/packages/release/bioc/bin/macosx/mavericks/contrib/3.1/pcaMethods_1.54.0.tgz")
install.packages("~/Downloads/pcaMethods_1.54.0.tgz", repos = NULL)
library(MEET)
install.packages("~/Downloads/Biobase_2.24.0.tgz", repos = NULL)
library(MEET)
install.packages("~/Downloads/BiocGenerics_0.10.0.tgz", repos = NULL)
library(MEET)
source("http://bioconductor.org/biocLite.R")
biocLite()
library(MEET)
library(Biobase)
clustal
library(MEET)
source("http://bioconductor.org/biocLite.R")
biocLite()
library(MEET)
install.packages("seqinr")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("MEET")
install.packages("MEET")
install.packages("~/Downloads/MEET_5.1.1.tar.gz", repos = NULL, type = "source")
install.packages("Biostrings")
library(biobase)
library(Biobase)
install.packages("~/Downloads/Biostrings_2.32.0.tgz", repos = NULL)
library("Biostrings", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
source("http://bioconductor.org/biocLite.R")
biocLite("XVector")
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = TRUE)
library(Biostrings)
source("http://bioconductor.org/biocLite.R")
biocLite("zlibbioc")
library(Biostrings)
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = TRUE)
sigma # Print out the matrix
s1 <- "GAATTC"
s2 <- "GATTA"
globalAligns1s2 <- pairwiseAlignment(s1, s2, substitutionMatrix = sigma, gapOpening = -2,
gapExtension = -8, scoreOnly = FALSE)
globalAligns1s2 # Print out the optimal alignment and its score
library("seqinr")
choosebank("swissprot")
query("leprae", "AC=Q9CD83")
lepraeseq <- getSequence(leprae$req[[1]])
query("ulcerans", "AC=A0PQ23")
ulceransseq <- getSequence(ulcerans$req[[1]])
closebank()
lepraeseq # Display the contents of "lepraeseq"
lepraeseqstring <- c2s(lepraeseq)     # Make a string that contains the sequence in "lepraeseq"
ulceransseqstring <- c2s(ulceransseq) # Make a string that contains the sequence in "ulceransseq"
lepraeseqstring <- toupper(lepraeseqstring)
ulceransseqstring <- toupper(ulceransseqstring)
lepraeseqstring # Print out the content of "lepraeseqstring"
globalAlignLepraeUlcerans <- pairwiseAlignment(lepraeseqstring, ulceransseqstring,
substitutionMatrix = BLOSUM50, gapOpening = -2, gapExtension = -8, scoreOnly = FALSE)
data(BLOSUM50)
#s3 <- "PAWHEAE"
#s4 <- "HEAGAWGHEE"
#globalAligns3s4 <- pairwiseAlignment(s3, s4, substitutionMatrix = "BLOSUM50", gapOpening = -2,
#                                      gapExtension = -8, scoreOnly = FALSE)
#globalAligns3s4 # Print out the optimal global alignment and its score
globalAlignLepraeUlcerans <- pairwiseAlignment(lepraeseqstring, ulceransseqstring,
substitutionMatrix = BLOSUM50, gapOpening = -2, gapExtension = -8, scoreOnly = FALSE)
globalAlignLepraeUlcerans
printPairwiseAlignment <- function(alignment, chunksize=60, returnlist=FALSE)
{
require(Biostrings)           # This function requires the Biostrings package
seq1aln <- pattern(alignment) # Get the alignment for the first sequence
seq2aln <- subject(alignment) # Get the alignment for the second sequence
alnlen  <- nchar(seq1aln)     # Find the number of columns in the alignment
starts  <- seq(1, alnlen, by=chunksize)
n       <- length(starts)
seq1alnresidues <- 0
seq2alnresidues <- 0
for (i in 1:n) {
chunkseq1aln <- substring(seq1aln, starts[i], starts[i]+chunksize-1)
chunkseq2aln <- substring(seq2aln, starts[i], starts[i]+chunksize-1)
# Find out how many gaps there are in chunkseq1aln:
gaps1 <- countPattern("-",chunkseq1aln) # countPattern() is from Biostrings package
# Find out how many gaps there are in chunkseq2aln:
gaps2 <- countPattern("-",chunkseq2aln) # countPattern() is from Biostrings package
# Calculate how many residues of the first sequence we have printed so far in the alignment:
seq1alnresidues <- seq1alnresidues + chunksize - gaps1
# Calculate how many residues of the second sequence we have printed so far in the alignment:
seq2alnresidues <- seq2alnresidues + chunksize - gaps2
if (returnlist == 'FALSE')
{
print(paste(chunkseq1aln,seq1alnresidues))
print(paste(chunkseq2aln,seq2alnresidues))
print(paste(' '))
}
}
if (returnlist == 'TRUE')
{
vector1 <- s2c(substring(seq1aln, 1, nchar(seq1aln)))
vector2 <- s2c(substring(seq2aln, 1, nchar(seq2aln)))
mylist <- list(vector1, vector2)
return(mylist)
}
}
printPairwiseAlignment(globalAlignLepraeUlcerans, 60)
str(pairwiseAlignment)
pairwiseAlignment
showMethods("pairwiseAlignment")
?pairwiseAlignment
3^198
2/9
demo()
demo(Japanese)
demo(smooth)
150+150+30+18
348+34.8
348 + 38
348 + 38.7
348 + 39
source('~/.active-rstudio-document', echo=TRUE)
qplot(steps, data = cleanData, fill = date)
libray(ggplot2)
library(ggplot2)
qplot(steps, data = cleanData, fill = date)
qplot(steps, data = cleanData)
steps.each.day <- tapply(cleanData$steps, cleanData$date, sum)
hist(steps.each.day, breaks = 10)
library(ggplot2)
qplot(steps.each.day, data = steps.each.day)
average.steps.interval <- tapply(cleanData$steps, cleanData$interval, mean)
plot(average.steps.interval, type = "l")
?max
X <- 0:23
max(x)
max(X)
X <- c(2, X)
X
max(X)
X <- c(24, X)
max(X)
X
average.steps.interval
plot(average.steps.interval, type = "l", xlab = "Index of the 5-minuts interval",
ylab = "Number of steps", main = "Time series of average number of steps")
split(cleanData, interval)
x <- split(cleanData, cleanData$interval)
x
x <- sapply(split(cleanData, cleanData$interval), average)
x <- sapply(split(cleanData, cleanData$interval), mean)
x
x <- split(cleanData, cleanData$interval)
str(x)
x <- sapply(split(cleanData, cleanData$interval)$steps, mean)
x
x
x <- sapply(split(cleanData, cleanData$interval)$steps, mean)
split(cleanData, cleanData$interval)$steps
x <- split(cleanData, cleanData$interval)
x
x[[1]]
x[1]
x[[]]$steps
x[[1]]$steps
x$steps
summary(x)
mean(x)
x <- split(cleanData[,c(1,3)2, cleanData$interval)
x <- split(cleanData[,c(1,3)], cleanData$interval)
x
x <- split(cleanData[,2], cleanData$interval)
x
x <- split(cleanData[,1], cleanData$interval)
x
sapply(x, mean)
plot(y)
y <- sapply(x, mean)
plot(y)
z <- t(y)
z
names(y)
plot(as.numeric(naames(y)), y)
plot(as.numeric(names(y)), y)
plot(as.numeric(names(y)), y, type = "l", xlab = "Time",
ylab = "Number of steps in the 5-minuts intervals", main = "Time series of average number of steps")
plot(as.numeric(names(y)), y, type = "l", xlab = "Time",
ylab = "Number of steps in the 5-minuts intervals", main = "Time series of average number of steps")
average.steps.interval
names(average.steps.interval)
plot(as.numeric(names(average.steps.interval)), average.steps.interval,
type = "l", xlab = "Time",
ylab = "Number of steps in the 5-minuts intervals",
main = "Time series of average number of steps")
(summary(steps.each.day2),
summary(steps.each.day))
WDaverage.steps.interval <- tapply(data.weekday$steps, data.weekday$interval, mean)
WEaverage.steps.interval <- tapply(data.weekend$steps, data.weekend$interval, mean)
par(mfrow = c(1,1))
plot(WDaverage.steps.interval, type = "l")
line(WEaverage.steps.interval, type = "l")
WDaverage.steps.interval <- tapply(data.weekday$steps, data.weekday$interval, mean)
WEaverage.steps.interval <- tapply(data.weekend$steps, data.weekend$interval, mean)
par(mfrow = c(1,1))
plot(WDaverage.steps.interval, type = "l")
line(WEaverage.steps.interval)
WDaverage.steps.interval <- tapply(data.weekday$steps, data.weekday$interval, mean)
WEaverage.steps.interval <- tapply(data.weekend$steps, data.weekend$interval, mean)
par(mfrow = c(1,1))
plot(WDaverage.steps.interval, type = "l")
par(new = TRUE
plot(WEaverage.steps.interval, type = "l", col = "red"")
WDaverage.steps.interval <- tapply(data.weekday$steps, data.weekday$interval, mean)
WEaverage.steps.interval <- tapply(data.weekend$steps, data.weekend$interval, mean)
par(mfrow = c(1,1))
plot(WDaverage.steps.interval, type = "l")
par(new = TRUE)
plot(WEaverage.steps.interval, type = "l", col = "red"")
WDaverage.steps.interval <- tapply(data.weekday$steps, data.weekday$interval, mean)
WEaverage.steps.interval <- tapply(data.weekend$steps, data.weekend$interval, mean)
par(mfrow = c(1,1))
plot(WDaverage.steps.interval, type = "l")
par(new = TRUE)
plot(WEaverage.steps.interval, type = "l", col = "red"")
WDaverage.steps.interval <- tapply(data.weekday$steps, data.weekday$interval, mean)
WEaverage.steps.interval <- tapply(data.weekend$steps, data.weekend$interval, mean)
par(mfrow = c(1,1))
plot(WDaverage.steps.interval, type = "l")
par(new = TRUE)
plot(WEaverage.steps.interval, type = "l", col = "red")
WDaverage.steps.interval <- tapply(data.weekday$steps, data.weekday$interval, mean)
WEaverage.steps.interval <- tapply(data.weekend$steps, data.weekend$interval, mean)
par(mfrow = c(1,1))
plot(WDaverage.steps.interval, type = "l")
par(new = TRUE)
plot(WEaverage.steps.interval, type = "l", col = "red")
WDaverage.steps.interval <- tapply(data.weekday$steps, data.weekday$interval, mean)
WEaverage.steps.interval <- tapply(data.weekend$steps, data.weekend$interval, mean)
par(mfrow = c(1,1))
plot(as.numeric(names(WDaverage.steps.interval)), WDaverage.steps.interval,
type = "l", xlab = "Time of a day (min)",
ylab = "Number of steps in the 5-minuts intervals",
main = "Time series of average number of steps", ylim = 0:300))
par(new = TRUE)
plot(as.numeric(names(WEaverage.steps.interval)), WEaverage.steps.interval,
type = "l", xlab = " ", ylab = " ", main = " ", ylim = 0:300, col = red)
WDaverage.steps.interval <- tapply(data.weekday$steps, data.weekday$interval, mean)
WEaverage.steps.interval <- tapply(data.weekend$steps, data.weekend$interval, mean)
par(mfrow = c(1,1))
plot(as.numeric(names(WDaverage.steps.interval)), WDaverage.steps.interval,
type = "l", xlab = "Time of a day (min)",
ylab = "Number of steps in the 5-minuts intervals",
main = "Time series of average number of steps", ylim = c(0,300))
par(new = TRUE)
plot(as.numeric(names(WEaverage.steps.interval)), WEaverage.steps.interval,
type = "l", xlab = " ", ylab = " ", main = " ", ylim = c(0,300), col = red)
WDaverage.steps.interval <- tapply(data.weekday$steps, data.weekday$interval, mean)
WEaverage.steps.interval <- tapply(data.weekend$steps, data.weekend$interval, mean)
par(mfrow = c(1,1))
plot(as.numeric(names(WDaverage.steps.interval)), WDaverage.steps.interval,
type = "l", xlab = "Time of a day (min)",
ylab = "Number of steps in the 5-minuts intervals",
main = "Time series of average number of steps", ylim = c(0,300))
par(new = TRUE)
plot(as.numeric(names(WEaverage.steps.interval)), WEaverage.steps.interval,
type = "l", xlab = " ", ylab = " ", main = " ", ylim = c(0,300), col = "red")
WDaverage.steps.interval <- tapply(data.weekday$steps, data.weekday$interval, mean)
WEaverage.steps.interval <- tapply(data.weekend$steps, data.weekend$interval, mean)
par(mfrow = c(1,1))
plot(as.numeric(names(WDaverage.steps.interval)), WDaverage.steps.interval,
type = "l", xlab = "Time of a day (min)",
ylab = "Number of steps in the 5-minuts intervals",
main = "Time series of average number of steps", ylim = c(0,250))
par(new = TRUE)
plot(as.numeric(names(WEaverage.steps.interval)), WEaverage.steps.interval,
type = "l", xlab = " ", ylab = " ", main = " ", ylim = c(0,250), col = "red")
WDaverage.steps.interval <- tapply(data.weekday$steps, data.weekday$interval, mean)
WEaverage.steps.interval <- tapply(data.weekend$steps, data.weekend$interval, mean)
par(mfrow = c(1,1))
plot(as.numeric(names(WDaverage.steps.interval)), WDaverage.steps.interval,
type = "l", xlab = "Time of a day (min)",
ylab = "Number of steps in the 5-minuts intervals",
main = "Time series of average number of steps", ylim = c(0,250))
par(new = TRUE)
plot(as.numeric(names(WEaverage.steps.interval)), WEaverage.steps.interval,
type = "l", xlab = " ", ylab = " ", main = " ", ylim = c(0,250), col = "red")
legend("topright", c(Weekday,Weekend), col = c("black", "red"), pch = c(1,19))
WDaverage.steps.interval <- tapply(data.weekday$steps, data.weekday$interval, mean)
WEaverage.steps.interval <- tapply(data.weekend$steps, data.weekend$interval, mean)
par(mfrow = c(1,1))
plot(as.numeric(names(WDaverage.steps.interval)), WDaverage.steps.interval,
type = "l", xlab = "Time of a day (min)",
ylab = "Number of steps in the 5-minuts intervals",
main = "Time series of average number of steps", ylim = c(0,250))
par(new = TRUE)
plot(as.numeric(names(WEaverage.steps.interval)), WEaverage.steps.interval,
type = "l", xlab = " ", ylab = " ", main = " ", ylim = c(0,250), col = "red")
legend("topright", c("Weekday","Weekend"), col = c("black", "red"), pch = c(1,19))
WDaverage.steps.interval <- tapply(data.weekday$steps, data.weekday$interval, mean)
WEaverage.steps.interval <- tapply(data.weekend$steps, data.weekend$interval, mean)
par(mfrow = c(1,1))
plot(as.numeric(names(WDaverage.steps.interval)), WDaverage.steps.interval,
type = "l", xlab = "Time of a day (min)",
ylab = "Number of steps in the 5-minuts intervals",
main = "Time series of average number of steps", ylim = c(0,250))
par(new = TRUE)
plot(as.numeric(names(WEaverage.steps.interval)), WEaverage.steps.interval,
type = "l", xlab = " ", ylab = " ", main = " ", ylim = c(0,250), col = "red")
legend("topright", c("Weekday","Weekend"), col = c("black", "red"), lty =c(1,1))
WDsteps.each.day <- tapply(data.weekday$steps, data.weekday$date, sum)
WEsteps.each.day <- tapply(data.weekend$steps, data.weekend$date, sum)
par(mfrow = c(1,2))
hist(WDsteps.each.day, breaks = 10, xlab = "Total number of steps taken a day",
main = "Histgram of steps each day \n (Weekday)")
hist(WEsteps.each.day, breaks = 10,  xlab = "Total number of steps taken a day",
main = "Histgram of steps each day \n (Weekend)", col = "red")
WDsteps.each.day <- tapply(data.weekday$steps, data.weekday$date, sum)
WEsteps.each.day <- tapply(data.weekend$steps, data.weekend$date, sum)
par(mfrow = c(1,2))
hist(WDsteps.each.day, breaks = 10, xlab = "Total number of steps taken a day",
main = "Histgram of steps each day \n (Weekday)", xlim = 20000)
hist(WEsteps.each.day, breaks = 10,  xlab = "Total number of steps taken a day",
main = "Histgram of steps each day \n (Weekend)", col = "red", xlim = 20000)
WDsteps.each.day <- tapply(data.weekday$steps, data.weekday$date, sum)
WEsteps.each.day <- tapply(data.weekend$steps, data.weekend$date, sum)
par(mfrow = c(1,2))
hist(WDsteps.each.day, breaks = 10, xlab = "Total number of steps taken a day",
main = "Histgram of steps each day \n (Weekday)", xlim = c(0,20000)
hist(WEsteps.each.day, breaks = 10,  xlab = "Total number of steps taken a day",
main = "Histgram of steps each day \n (Weekend)", col = "red", xlim = c(0, 20000)
WDsteps.each.day <- tapply(data.weekday$steps, data.weekday$date, sum)
WEsteps.each.day <- tapply(data.weekend$steps, data.weekend$date, sum)
par(mfrow = c(1,2))
hist(WDsteps.each.day, breaks = 10, xlab = "Total number of steps taken a day",
main = "Histgram of steps each day \n (Weekday)", xlim = c(0,20000))
hist(WEsteps.each.day, breaks = 10,  xlab = "Total number of steps taken a day",
main = "Histgram of steps each day \n (Weekend)", col = "red", xlim = c(0, 20000))
